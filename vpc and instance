touch ec2.tf
touch main.tf
touch provider.tf
touch terraform.tf
touch vars.tf
vi vars.tf
variable "region" {}
variable "main_vpc_cidr" {}
variable "public_subnets" {}
variable "private_subnets" {}
vi provider.tf
provider "aws" {
region="us-east-1"
access_key="your"
secret_key="your"
}
vi terraform.tfvars
region="us-east-1"
main_vpc_cidr="10.0.0.0/24"
public_subnets="10.0.0.128/26"
private_subnets="10.0.0.192/26"
vi main.tf
# create a vpc
resource "aws_vpc" "Main" {
cidr_block=var.main_vpc_cidr
instance_tenancy="default"
tags={
Name="test-vpc"
}
}
# create Elastic IP
resource "aws_eip" "nateIP" {
vpc = true
}
# create IGW and attach to the VPC
resource "aws_internet_gateway" "IGW" {
vpc_id=aws_vpc.Main.id
tags={
Name="test-IGW"
}
}
# create NATGW
resource "aws_nat_gateway" "NATgw" {
allocation_id = aws_eip.nateIP.id
subnet_id = aws_subnet.publicsubnets.id
tags = {
Name = "myNATGW"
}
}
# create public subnets
resource "aws_subnet" "publicsubnets" {
vpc_id=aws_vpc.Main.id
cidr_block="${var.public_subnets}"
tags={
Name="public_sbnt"
}
}
# create private subnets
resource "aws_subnet" "privatesubnets" {
vpc_id=aws_vpc.Main.id
cidr_block="${var.private_subnets}"
tags={
Name="private-sbnt"
}
}
# create Public Route Table
resource "aws_route_table" "PublicRT" {
vpc_id=aws_vpc.Main.id
route {
cidr_block="0.0.0.0/0"
gateway_id=aws_internet_gateway.IGW.id
}
tags={
Name="publicRT"
}
}
# create Private Route Table
resource "aws_route_table" "PrivateRT" {
vpc_id=aws_vpc.Main.id
route {
cidr_block="0.0.0.0/0"
nat_gateway_id=aws_nat_gateway.NATgw.id
}
tags={
Name="privateRT"
}
}
# Route table Association with Public Subnet's
resource "aws_route_table_association" "PublicRTassociation" {
subnet_id = aws_subnet.publicsubnets.id
route_table_id = aws_route_table.PublicRT.id
}
# Route table Association with Private Subnet's
resource "aws_route_table_association" "PrivateRTassociation" {
subnet_id = aws_subnet.privatesubnets.id
route_table_id = aws_route_table.PrivateRT.id
}
# choose/create AWS AMI
data "aws_ami" "amazon-linux-2" {
most_recent=true
owners=["amazon"]
filter {
name="name"
values=["amzn2-ami-hvm*"]
}
}

# use existing key
variable "key_name" {
description = "test u"
default = "test u"
}
vi ec2.tf
# launch EC2
resource "aws_instance" "example-ec2-1" {
ami = data.aws_ami.amazon-linux-2.id
instance_type = "t2.micro"
associate_public_ip_address = true
subnet_id = aws_subnet.publicsubnets.id
key_name = var.key_name
tags={
Name="server"
}
}
# terraform init
# terraform plan
# terraform apply


